import React, { useState, useEffect } from 'react';
import { AlertTriangle, CheckCircle, Info, X, Bell, BellOff, Volume2, VolumeX, Filter, Search, Clock, MapPin, User, Zap, Shield, Heart, Brain, TrendingUp } from 'lucide-react';
import { Alert, User as UserType, Zone } from '../../types';
import { supabaseService } from '../../services/supabaseService';

interface SmartAlertsPanelProps {
  alerts: Alert[];
  zones: Zone[];
  onAlertAcknowledge: (id: string) => void;
  user: UserType;
}

interface SmartAlert extends Alert {
  severity: 'low' | 'medium' | 'high' | 'critical';
  category: 'crowd' | 'safety' | 'system' | 'prediction' | 'evacuation';
  autoGenerated: boolean;
  relatedZones: string[];
  actionRequired: boolean;
  estimatedImpact: number;
}

export const SmartAlertsPanel: React.FC<SmartAlertsPanelProps> = ({ 
  alerts, 
  zones,
  onAlertAcknowledge, 
  user
}) => {
  const [filter, setFilter] = useState<'all' | 'warning' | 'critical' | 'info'>('all');
  const [categoryFilter, setCategoryFilter] = useState<'all' | 'crowd' | 'safety' | 'system' | 'prediction'>('all');
  const [searchTerm, setSearchTerm] = useState('');
  const [soundEnabled, setSoundEnabled] = useState(true);
  const [notificationsEnabled, setNotificationsEnabled] = useState(true);
  const [smartAlerts, setSmartAlerts] = useState<SmartAlert[]>([]);
  const [alertStats, setAlertStats] = useState({
    total: 0,
    critical: 0,
    autoGenerated: 0,
    avgResponseTime: 0,
    predictionAccuracy: 0
  });

  useEffect(() => {
    enhanceAlerts();
    updateAlertStats();
  }, [alerts, zones]);

  const enhanceAlerts = () => {
    const enhanced = alerts.map(alert => {
      const zone = zones.find(z => z.id === alert.location_id);
      const occupancy = zone ? (zone.current_count / zone.capacity) * 100 : 0;
      
      // Determine severity based on multiple factors
      let severity: 'low' | 'medium' | 'high' | 'critical' = 'medium';
      if (alert.type === 'critical' || occupancy > 90) severity = 'critical';
      else if (alert.type === 'warning' || occupancy > 70) severity = 'high';
      else if (occupancy > 50) severity = 'medium';
      else severity = 'low';

      // Categorize alerts
      let category: 'crowd' | 'safety' | 'system' | 'prediction' | 'evacuation' = 'crowd';
      if (alert.message.toLowerCase().includes('prediction') || alert.message.toLowerCase().includes('forecast')) {
        category = 'prediction';
      } else if (alert.message.toLowerCase().includes('evacuation') || alert.message.toLowerCase().includes('route')) {
        category = 'evacuation';
      } else if (alert.message.toLowerCase().includes('system') || alert.message.toLowerCase().includes('connection')) {
        category = 'system';
      } else if (alert.message.toLowerCase().includes('safety') || alert.message.toLowerCase().includes('medical')) {
        category = 'safety';
      }

      // Find related zones (neighboring zones with similar issues)
      const relatedZones = zones
        .filter(z => z.id !== alert.location_id && z.status !== 'safe')
        .map(z => z.id)
        .slice(0, 3);

      return {
        ...alert,
        severity,
        category,
        autoGenerated: !alert.message.includes('Manual'),
        relatedZones,
        actionRequired: severity === 'critical' || severity === 'high',
        estimatedImpact: Math.min(100, occupancy + (relatedZones.length * 10))
      } as SmartAlert;
    });

    setSmartAlerts(enhanced);
  };

  const updateAlertStats = () => {
    const stats = {
      total: alerts.length,
      critical: alerts.filter(a => a.type === 'critical').length,
      autoGenerated: smartAlerts.filter(a => a.autoGenerated).length,
      avgResponseTime: 120 + Math.random() * 180, // Simulated
      predictionAccuracy: 85 + Math.random() * 10 // Simulated
    };
    setAlertStats(stats);
  };

  const generatePredictiveAlert = async (zone: Zone) => {
    if (zone.status === 'critical') return;

    const occupancy = (zone.current_count / zone.capacity) * 100;
    if (occupancy > 75) {
      // Check if user is authenticated and has permission
      if (!user || !user.permissions.canAcknowledgeAlerts) {
        console.warn('User does not have permission to create alerts');
        return;
      }
      
      const alertData = {
        type: (occupancy > 85 ? 'critical' : 'warning') as const,
        message: `AI Prediction: ${zone.name} ${occupancy > 85 ? 'will exceed' : 'approaching'} critical capacity within 15 minutes. Current: ${zone.current_count}/${zone.capacity} (${occupancy.toFixed(1)}%). ${occupancy > 85 ? 'Immediate evacuation recommended.' : 'Enhanced monitoring advised.'}`,
        location_id: zone.id,
        timestamp: new Date().toISOString(),
        acknowledged: false,
      };
      
      try {
        await supabaseService.createAlert(alertData);
      } catch (error) {
        console.warn('Failed to create alert via Supabase, using local alert instead:', error);
        // Create a local alert for demo purposes
        const localAlert = {
          id: `local-alert-${Date.now()}`,
          ...alertData
        };
        // You could dispatch this to a local state or show a notification
      }
    }
  };

  const getAlertIcon = (alert: SmartAlert) => {
    switch (alert.category) {
      case 'prediction': return <Brain className="w-5 h-5 text-purple-600" />;
      case 'evacuation': return <TrendingUp className="w-5 h-5 text-orange-600" />;
      case 'safety': return <Shield className="w-5 h-5 text-red-600" />;
      case 'system': return <Zap className="w-5 h-5 text-blue-600" />;
      default: return <AlertTriangle className="w-5 h-5 text-yellow-600" />;
    }
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'bg-red-100 text-red-800 border-red-300';
      case 'high': return 'bg-orange-100 text-orange-800 border-orange-300';
      case 'medium': return 'bg-yellow-100 text-yellow-800 border-yellow-300';
      case 'low': return 'bg-blue-100 text-blue-800 border-blue-300';
      default: return 'bg-gray-100 text-gray-800 border-gray-300';
    }
  };

  const getCategoryColor = (category: string) => {
    switch (category) {
      case 'prediction': return 'bg-purple-50 border-purple-200';
      case 'evacuation': return 'bg-orange-50 border-orange-200';
      case 'safety': return 'bg-red-50 border-red-200';
      case 'system': return 'bg-blue-50 border-blue-200';
      default: return 'bg-yellow-50 border-yellow-200';
    }
  };

  const filteredAlerts = smartAlerts.filter(alert => {
    const matchesType = filter === 'all' || alert.type === filter;
    const matchesCategory = categoryFilter === 'all' || alert.category === categoryFilter;
    const matchesSearch = alert.message.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         alert.location_id.toLowerCase().includes(searchTerm.toLowerCase());
    const hasPermission = user.permissions.canViewAllZones || 
                         user.assigned_zones.includes(alert.location_id);
    
    return matchesType && matchesCategory && matchesSearch && hasPermission && !alert.acknowledged;
  }).sort((a, b) => {
    // Sort by severity first, then by timestamp
    const severityOrder = { critical: 0, high: 1, medium: 2, low: 3 };
    const severityDiff = severityOrder[a.severity] - severityOrder[b.severity];
    if (severityDiff !== 0) return severityDiff;
    
    return new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime();
  });

  return (
    <div className="bg-white rounded-xl shadow-lg p-6">
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center space-x-3">
          <div className="bg-red-100 p-2 rounded-lg">
            <Brain className="w-6 h-6 text-red-600" />
          </div>
          <div>
            <h2 className="text-xl font-semibold text-gray-900">Smart Alert System</h2>
            <p className="text-sm text-gray-600">AI-powered alert management with predictive capabilities</p>
          </div>
        </div>
        
        <div className="flex items-center space-x-3">
          <button
            onClick={() => setSoundEnabled(!soundEnabled)}
            className={`p-2 rounded-lg transition-colors ${
              soundEnabled ? 'bg-blue-100 text-blue-600' : 'bg-gray-100 text-gray-600'
            }`}
          >
            {soundEnabled ? <Volume2 className="w-4 h-4" /> : <VolumeX className="w-4 h-4" />}
          </button>
          
          <button
            onClick={() => setNotificationsEnabled(!notificationsEnabled)}
            className={`p-2 rounded-lg transition-colors ${
              notificationsEnabled ? 'bg-blue-100 text-blue-600' : 'bg-gray-100 text-gray-600'
            }`}
          >
            {notificationsEnabled ? <Bell className="w-4 h-4" /> : <BellOff className="w-4 h-4" />}
          </button>
        </div>
      </div>

      {/* Enhanced Statistics */}
      <div className="grid grid-cols-2 md:grid-cols-5 gap-4 mb-6">
        <div className="bg-gray-50 rounded-lg p-3 text-center">
          <div className="text-2xl font-bold text-gray-900">{alertStats.total}</div>
          <div className="text-xs text-gray-600">Total Alerts</div>
        </div>
        <div className="bg-red-50 rounded-lg p-3 text-center">
          <div className="text-2xl font-bold text-red-600">{alertStats.critical}</div>
          <div className="text-xs text-red-600">Critical</div>
        </div>
        <div className="bg-purple-50 rounded-lg p-3 text-center">
          <div className="text-2xl font-bold text-purple-600">{alertStats.autoGenerated}</div>
          <div className="text-xs text-purple-600">AI Generated</div>
        </div>
        <div className="bg-blue-50 rounded-lg p-3 text-center">
          <div className="text-2xl font-bold text-blue-600">{Math.round(alertStats.avgResponseTime)}s</div>
          <div className="text-xs text-blue-600">Avg Response</div>
        </div>
        <div className="bg-green-50 rounded-lg p-3 text-center">
          <div className="text-2xl font-bold text-green-600">{Math.round(alertStats.predictionAccuracy)}%</div>
          <div className="text-xs text-green-600">AI Accuracy</div>
        </div>
      </div>

      {/* Enhanced Filters */}
      <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4 mb-6">
        <div className="flex items-center space-x-4">
          <div className="relative">
            <Search className="w-4 h-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
            <input
              type="text"
              placeholder="Search alerts..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="pl-10 pr-4 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
          
          <select
            value={filter}
            onChange={(e) => setFilter(e.target.value as any)}
            className="px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          >
            <option value="all">All Types</option>
            <option value="critical">Critical</option>
            <option value="warning">Warning</option>
            <option value="info">Info</option>
          </select>

          <select
            value={categoryFilter}
            onChange={(e) => setCategoryFilter(e.target.value as any)}
            className="px-3 py-2 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          >
            <option value="all">All Categories</option>
            <option value="crowd">Crowd</option>
            <option value="prediction">AI Prediction</option>
            <option value="evacuation">Evacuation</option>
            <option value="safety">Safety</option>
            <option value="system">System</option>
          </select>
        </div>

        <div className="flex items-center space-x-2">
          <button
            onClick={() => {
              zones.forEach(zone => {
                if (zone.status === 'moderate' || zone.status === 'critical') {
                  generatePredictiveAlert(zone);
                }
              });
            }}
            className="px-3 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors text-sm"
          >
            Generate AI Predictions
          </button>
        </div>
      </div>

      {/* Smart Alerts List */}
      <div className="space-y-3 max-h-96 overflow-y-auto">
        {filteredAlerts.length === 0 ? (
          <div className="text-center py-8 text-gray-500">
            <CheckCircle className="w-12 h-12 mx-auto mb-2 text-green-500" />
            <p>No active alerts</p>
            <p className="text-sm">All systems operating normally</p>
          </div>
        ) : (
          filteredAlerts.map((alert) => {
            const zone = zones.find(z => z.id === alert.location_id);
            const timeAgo = Math.floor((Date.now() - new Date(alert.timestamp).getTime()) / 60000);
            
            return (
              <div
                key={alert.id}
                className={`p-4 rounded-lg border transition-all hover:shadow-md ${getCategoryColor(alert.category)}`}
              >
                <div className="flex items-start justify-between">
                  <div className="flex items-start space-x-3 flex-1">
                    {getAlertIcon(alert)}
                    <div className="flex-1">
                      <div className="flex items-center space-x-2 mb-2">
                        <span className={`px-2 py-1 rounded-full text-xs font-medium border ${getSeverityColor(alert.severity)}`}>
                          {alert.severity.toUpperCase()}
                        </span>
                        <span className="px-2 py-1 bg-gray-100 text-gray-700 rounded-full text-xs font-medium capitalize">
                          {alert.category}
                        </span>
                        {alert.autoGenerated && (
                          <span className="px-2 py-1 bg-purple-100 text-purple-700 rounded-full text-xs font-medium">
                            AI Generated
                          </span>
                        )}
                        {alert.actionRequired && (
                          <span className="px-2 py-1 bg-red-100 text-red-700 rounded-full text-xs font-medium animate-pulse">
                            ACTION REQUIRED
                          </span>
                        )}
                      </div>
                      
                      <p className="text-sm font-medium text-gray-900 mb-2">{alert.message}</p>
                      
                      <div className="grid grid-cols-2 gap-4 text-xs text-gray-600 mb-2">
                        <div className="flex items-center space-x-1">
                          <MapPin className="w-3 h-3" />
                          <span>{zone?.name || alert.location_id}</span>
                        </div>
                        <div className="flex items-center space-x-1">
                          <Clock className="w-3 h-3" />
                          <span>
                            {timeAgo < 1 ? 'Just now' : 
                             timeAgo < 60 ? `${timeAgo}m ago` : 
                             `${Math.floor(timeAgo / 60)}h ago`}
                          </span>
                        </div>
                      </div>

                      {/* Zone Context */}
                      {zone && (
                        <div className="mb-2 p-2 bg-white bg-opacity-70 rounded text-xs">
                          <div className="grid grid-cols-3 gap-2">
                            <div>
                              <span className="text-gray-600">Count:</span>
                              <span className="font-medium ml-1">{zone.current_count}</span>
                            </div>
                            <div>
                              <span className="text-gray-600">Capacity:</span>
                              <span className="font-medium ml-1">{zone.capacity}</span>
                            </div>
                            <div>
                              <span className="text-gray-600">Impact:</span>
                              <span className="font-medium ml-1">{alert.estimatedImpact}%</span>
                            </div>
                            <div className="col-span-3 mt-1 pt-1 border-t border-gray-300">
                              <span className="text-gray-600">Occupancy Rate:</span>
                              <span className={`font-medium ml-1 ${
                                (zone.current_count / zone.capacity) > 0.9 ? 'text-red-600' :
                                (zone.current_count / zone.capacity) > 0.7 ? 'text-yellow-600' : 'text-green-600'
                              }`}>
                                {((zone.current_count / zone.capacity) * 100).toFixed(1)}%
                              </span>
                            </div>
                          </div>
                        </div>
                      )}

                      {/* Related Zones */}
                      {alert.relatedZones.length > 0 && (
                        <div className="mb-2 p-2 bg-blue-50 rounded text-xs">
                          <span className="text-blue-700 font-medium">Related zones affected: </span>
                          <span className="text-blue-600">
                            {alert.relatedZones.map(zoneId => {
                              const relatedZone = zones.find(z => z.id === zoneId);
                              return relatedZone?.name || zoneId;
                            }).join(', ')}
                          </span>
                           <div className="mt-1 text-blue-600">
                             Suggested action: Monitor neighboring zones for overflow
                           </div>
                        </div>
                      )}

                      {/* AI Recommendations */}
                      {alert.category === 'prediction' && (
                        <div className="mt-2 p-2 bg-purple-50 border border-purple-200 rounded">
                          <p className="text-xs text-purple-700 font-medium">
                            🤖 AI Recommendation: {
                              alert.severity === 'critical' ? 'Immediate evacuation to nearest safe zone' :
                              alert.severity === 'high' ? 'Prepare crowd control measures and monitor exits' :
                              'Enhanced monitoring and crowd flow management'
                            }
                          </p>
                          {alert.severity === 'critical' && (
                            <p className="text-xs text-purple-600 mt-1">
                              Estimated evacuation time: 10-15 minutes to safe zones
                            </p>
                          )}
                        </div>
                      )}
                    </div>
                  </div>
                  
                  <div className="flex items-center space-x-2 ml-4">
                    {user.permissions.canAcknowledgeAlerts && (
                      <button
                        onClick={() => onAlertAcknowledge(alert.id)}
                        className="px-3 py-1 bg-green-600 text-white rounded text-sm hover:bg-green-700 transition-colors"
                      >
                        Acknowledge
                      </button>
                    )}
                    
                    <button className="text-gray-400 hover:text-gray-600 transition-colors">
                      <X className="w-4 h-4" />
                    </button>
                  </div>
                </div>
              </div>
            );
          })
        )}
      </div>

      {/* AI Insights */}
      <div className="mt-6 pt-4 border-t border-gray-200">
        <h3 className="font-medium text-gray-900 mb-3">AI Insights</h3>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div className="bg-purple-50 rounded-lg p-3">
            <div className="text-sm text-purple-600 font-medium">Prediction Accuracy</div>
            <div className="text-lg font-bold text-purple-900">{Math.round(alertStats.predictionAccuracy)}%</div>
            <div className="text-xs text-purple-700">Last 24 hours</div>
          </div>
          <div className="bg-blue-50 rounded-lg p-3">
            <div className="text-sm text-blue-600 font-medium">Auto-Generated</div>
            <div className="text-lg font-bold text-blue-900">
              {Math.round((alertStats.autoGenerated / alertStats.total) * 100) || 0}%
            </div>
            <div className="text-xs text-blue-700">Of all alerts</div>
          </div>
          <div className="bg-green-50 rounded-lg p-3">
            <div className="text-sm text-green-600 font-medium">Response Time</div>
            <div className="text-lg font-bold text-green-900">{Math.round(alertStats.avgResponseTime)}s</div>
            <div className="text-xs text-green-700">Average response</div>
          </div>
        </div>
      </div>
    </div>
  );
};